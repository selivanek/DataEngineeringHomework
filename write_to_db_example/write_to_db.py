import os
import pandas as pd
from sqlalchemy import create_engine, text
import requests
import io
def main():
    print("=" * 50)
    print("üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è")
    print("=" * 50)
    print("‚ÑπÔ∏è  –í—Å–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ—Ä—É—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã Windows")
    print("=" * 50)

    # 1. –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –°–†–ï–î–´
    print("\n1. üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã...")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ò–ó –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø WINDOWS
    db_host = os.getenv('DB_HOST')
    db_port = os.getenv('DB_PORT')
    db_name = os.getenv('DB_NAME')
    db_user = os.getenv('DB_USER')
    db_password = os.getenv('DB_PASSWORD')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
    if not all([db_host, db_port, db_name, db_user, db_password]):
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã!")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã Windows —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:")
        print("   DB_HOST, DB_PORT, DB_NAME, DB_USER, DB_PASSWORD")
        print("\n   üí° –ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã:")
        print("   - Win + R ‚Üí sysdm.cpl ‚Üí Enter")
        print("   - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ ‚Üí –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã")
        print("   - –í —Ä–∞–∑–¥–µ–ª–µ '–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' –Ω–∞–∂–º–∏ '–°–æ–∑–¥–∞—Ç—å'")
        return

    print("   ‚úÖ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã Windows")
    print(f"   üìç –•–æ—Å—Ç (DB_HOST): {db_host}")
    print(f"   üîå –ü–æ—Ä—Ç (DB_PORT): {db_port}")
    print(f"   üóÉÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (DB_NAME): {db_name}")
    print(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (DB_USER): {db_user}")
    print(f"   üîí –ü–∞—Ä–æ–ª—å (DB_PASSWORD): ***")

    # 2. –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö PostgreSQL –ë–î homeworks (–∏—Å–ø–æ–ª—å–∑—É—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã)
    print("\n2. üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL –ë–î homeworks...")
    print("   üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã")

    try:
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ò–ó –ü–ï–†–ï–ú–ï–ù–ù–´–• –°–†–ï–î–´
        connection_string = f"postgresql://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}"

        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        engine = create_engine(connection_string)
        print("   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ!")
        print("   üí° –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤–∑—è—Ç—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã Windows")

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return

    # 3. –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ò–ó PARQUET –§–ê–ô–õ–ê
    print("\n3. üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ GitHub...")

    # –°—Å—ã–ª–∫–∞ –Ω–∞ Parquet —Ñ–∞–π–ª –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ GitHub
    parquet_url = "https://github.com/selivanek/DataEngineeringHomework/raw/main/updated_dataset.parquet"

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
        print("   üì° –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑ GitHub...")
        response = requests.get(parquet_url)
        response.raise_for_status()

        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ DataFrame
        df = pd.read_parquet(io.BytesIO(response.content))
        print(f"   ‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω! –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {len(df)}")

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        print("   üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
        return

    # 4. –ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–• (–ø–µ—Ä–≤—ã–µ 100 —Å—Ç—Ä–æ–∫)
    print("\n4. üìä –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")

    if len(df) > 100:
        df_100 = df.head(100)
        print(f"   ‚úÖ –í–∑—è–ª–∏ –ø–µ—Ä–≤—ã–µ 100 —Å—Ç—Ä–æ–∫ –∏–∑ {len(df)}")
    else:
        df_100 = df
        print(f"   ‚úÖ –í —Ñ–∞–π–ª–µ –≤—Å–µ–≥–æ {len(df)} —Å—Ç—Ä–æ–∫, –±–µ—Ä–µ–º –≤—Å–µ")

    # 5. –ó–ê–ü–ò–°–¨ –î–ê–ù–ù–´–• –í –¢–ê–ë–õ–ò–¶–£
    print("\n5. üíæ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É sevalneva...")
    print("   üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã")

    try:
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É 'sevalneva'
        df_100.to_sql(
            'sevalneva',
            engine,
            schema='public',
            if_exists='replace',
            index=False
        )
        print("   ‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É 'sevalneva'!")

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {e}")
        return

    # 6. –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê
    print("\n6. ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")

    try:
        # –°—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
        with engine.connect() as conn:
            result = conn.execute(text("SELECT COUNT(*) FROM public.sevalneva"))
            row_count = result.scalar()

        print(f"   ‚úÖ –í —Ç–∞–±–ª–∏—Ü–µ 'sevalneva' —Ç–µ–ø–µ—Ä—å {row_count} —Å—Ç—Ä–æ–∫")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ
        print(f"\n   üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–±–ª–∏—Ü–µ:")
        print(f"      - –ò–º—è: sevalneva")
        print(f"      - –°—Ç—Ä–æ–∫: {row_count}")
        print(f"      - –ö–æ–ª–æ–Ω–æ–∫: {len(df_100.columns)}")

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        return

    # 7. –ó–ê–í–ï–†–®–ï–ù–ò–ï
    print("\n" + "=" * 50)
    print("üéâ –í–°–ï –ü–£–ù–ö–¢–´ –ó–ê–î–ê–ù–ò–Ø –í–´–ü–û–õ–ù–ï–ù–´!")
    print("üí° –í—Å–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—Ä–∞–ª–∏—Å—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã Windows")
    print("=" * 50)


if __name__ == "__main__":
    main()

