import os
import pandas as pd
from sqlalchemy import create_engine


def validate_raw_data(df: pd.DataFrame) -> bool:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    print("üîç –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ...")

    checks = [
        (not df.empty, "–î–∞–Ω–Ω—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏"),
        (len(df.columns) > 0, "–î–æ–ª–∂–Ω—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏"),
        (df.isnull().sum().sum() < len(df) * 0.5, "–ù–µ –±–æ–ª–µ–µ 50% –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
    ]

    all_valid = True
    for check, message in checks:
        if not check:
            print(f"‚ùå {message}")
            all_valid = False
        else:
            print(f"‚úÖ {message}")

    return all_valid


def validate_transformed_data(df: pd.DataFrame) -> bool:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    print("üîç –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ
    float16_cols = df.select_dtypes(include=['float16']).columns
    bool_cols = df.select_dtypes(include=['bool']).columns

    print(f"‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ float16 –∫–æ–ª–æ–Ω–æ–∫: {len(float16_cols)}")
    print(f"‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ bool –∫–æ–ª–æ–Ω–æ–∫: {len(bool_cols)}")

    return True


def validate_database_connection() -> dict:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    """
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î...")

    db_host = os.getenv('DB_HOST')
    db_port = os.getenv('DB_PORT')
    db_name = os.getenv('DB_NAME')
    db_user = os.getenv('DB_USER')
    db_password = os.getenv('DB_PASSWORD')

    required_vars = {
        'DB_HOST': db_host,
        'DB_PORT': db_port,
        'DB_NAME': db_name,
        'DB_USER': db_user,
        'DB_PASSWORD': db_password
    }

    missing_vars = [var for var, value in required_vars.items() if not value]

    if missing_vars:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã: {', '.join(missing_vars)}")
        return None

    print("‚úÖ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã")
    return {
        'host': db_host,
        'port': db_port,
        'database': db_name,
        'user': db_user,
        'password': db_password
    }


def validate_output_data(engine, table_name: str, row_count: int) -> bool:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    print("üîç –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")

    checks = [
        (row_count > 0, f"–¢–∞–±–ª–∏—Ü–∞ {table_name} –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—É—Å—Ç–æ–π"),
        (row_count <= 100, "–ù–µ –±–æ–ª–µ–µ 100 —Å—Ç—Ä–æ–∫ –≤ –ë–î")
    ]

    all_valid = True
    for check, message in checks:
        if not check:
            print(f"‚ùå {message}")
            all_valid = False
        else:
            print(f"‚úÖ {message}")

    return all_valid