import os
import pandas as pd
from sqlalchemy import create_engine, text
from .validate import validate_database_connection, validate_output_data


def load_to_database(df: pd.DataFrame, table_name: str = "sevalneva", max_rows: int = 100):
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ PostgreSQL (–º–∞–∫—Å–∏–º—É–º 100 —Å—Ç—Ä–æ–∫)
    """
    print("üíæ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î...")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
    db_config = validate_database_connection()
    if not db_config:
        return False

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫
    if len(df) > max_rows:
        df_limited = df.head(max_rows)
        print(f"üìä –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ {max_rows} —Å—Ç—Ä–æ–∫")
    else:
        df_limited = df
        print(f"üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ {len(df)} —Å—Ç—Ä–æ–∫")

    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        connection_string = f"postgresql://{db_config['user']}:{db_config['password']}@{db_config['host']}:{db_config['port']}/{db_config['database']}"
        engine = create_engine(connection_string)

        # –ó–∞–ø–∏—Å—å –≤ –ë–î
        df_limited.to_sql(
            table_name,
            engine,
            schema='public',
            if_exists='replace',
            index=False
        )
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É: {table_name}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        with engine.connect() as conn:
            result = conn.execute(text(f"SELECT COUNT(*) FROM public.{table_name}"))
            row_count = result.scalar()

        print(f"üìä –í —Ç–∞–±–ª–∏—Ü–µ '{table_name}' —Ç–µ–ø–µ—Ä—å {row_count} —Å—Ç—Ä–æ–∫")

        if validate_output_data(engine, table_name, row_count):
            return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ë–î: {e}")
        return False


def save_processed_parquet(df: pd.DataFrame, output_path: str):
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ Parquet
    """
    os.makedirs(os.path.dirname(output_path), exist_ok=True)
    df.to_parquet(output_path, index=False)
    print(f"üíæ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_path}")